import{_ as T,m as V,a4 as q,g as m,h as $,l as A,n as B,H as z,Z as F,a0 as h,a2 as H,a5 as R,q as x,r as D,s as E,o as G,c as J,a as P,z as U,v as Z,A as K,a6 as L}from"./BD7xl8KE.js";import{u as Q}from"./DMlTFDde.js";const u=V(m.ui.strategy,m.ui.textarea,q),W=$({inheritAttrs:!1,props:{modelValue:{type:[String,Number],default:""},id:{type:String,default:null},name:{type:String,default:null},placeholder:{type:String,default:null},required:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},rows:{type:Number,default:3},maxrows:{type:Number,default:0},autoresize:{type:Boolean,default:!1},autofocus:{type:Boolean,default:!1},autofocusDelay:{type:Number,default:100},resize:{type:Boolean,default:!1},padded:{type:Boolean,default:!0},size:{type:String,default:null,validator(e){return Object.keys(u.size).includes(e)}},color:{type:String,default:()=>u.default.color,validator(e){return[...m.ui.colors,...Object.keys(u.color)].includes(e)}},variant:{type:String,default:()=>u.default.variant,validator(e){return[...Object.keys(u.variant),...Object.values(u.color).flatMap(t=>Object.keys(t))].includes(e)}},textareaClass:{type:String,default:null},class:{type:[String,Object,Array],default:()=>""},ui:{type:Object,default:()=>({})},modelModifiers:{type:Object,default:()=>({})}},emits:["update:modelValue","blur","change"],setup(e,{emit:t}){const{ui:l,attrs:c}=A("textarea",B(e,"ui"),u,B(e,"class")),{emitFormBlur:p,emitFormInput:g,inputId:n,color:v,size:y,name:C}=Q(e,u),r=z(F({},e.modelModifiers,{trim:!1,lazy:!1,number:!1})),s=z(null),b=()=>{var a;e.autofocus&&((a=s.value)==null||a.focus())},d=()=>{if(e.autoresize){if(!s.value)return;s.value.rows=e.rows;const a=window.getComputedStyle(s.value),o=parseInt(a.paddingTop),i=parseInt(a.paddingBottom),k=o+i,M=parseInt(a.lineHeight),{scrollHeight:N}=s.value,f=(N-k)/M;f>e.rows&&(s.value.rows=e.maxrows?Math.min(f,e.maxrows):f)}},w=a=>{r.value.trim&&(a=a.trim()),r.value.number&&(a=L(a)),t("update:modelValue",a),g()},I=a=>{d(),r.value.lazy||w(a.target.value)},S=a=>{const o=a.target.value;t("change",o),r.value.lazy&&w(o),r.value.trim&&(a.target.value=o.trim())},j=a=>{t("blur",a),p()};h(()=>{setTimeout(()=>{b()},e.autofocusDelay)}),H(()=>e.modelValue,()=>{R(d)}),h(()=>{setTimeout(()=>{b(),d()},100)});const O=x(()=>{var o,i;const a=((i=(o=l.value.color)==null?void 0:o[v.value])==null?void 0:i[e.variant])||l.value.variant[e.variant];return D(E(l.value.base,l.value.form,l.value.rounded,l.value.placeholder,l.value.size[y.value],e.padded?l.value.padding[y.value]:"p-0",a==null?void 0:a.replaceAll("{color}",v.value),!e.resize&&"resize-none"),e.textareaClass)});return{ui:l,attrs:c,name:C,inputId:n,textarea:s,textareaClass:O,onInput:I,onChange:S,onBlur:j}}}),X=["id","value","name","rows","required","disabled","placeholder"];function Y(e,t,l,c,p,g){return G(),J("div",{class:K(e.ui.wrapper)},[P("textarea",U({id:e.inputId,ref:"textarea",value:e.modelValue,name:e.name,rows:e.rows,required:e.required,disabled:e.disabled,placeholder:e.placeholder,class:e.textareaClass},e.attrs,{onInput:t[0]||(t[0]=(...n)=>e.onInput&&e.onInput(...n)),onBlur:t[1]||(t[1]=(...n)=>e.onBlur&&e.onBlur(...n)),onChange:t[2]||(t[2]=(...n)=>e.onChange&&e.onChange(...n))}),null,16,X),Z(e.$slots,"default")],2)}const ae=T(W,[["render",Y]]);export{ae as _};
